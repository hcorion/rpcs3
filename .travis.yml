language: cpp
sudo: required
dist: trusty

os:
  - linux
  #- osx
services:
  - docker

# osx_image: xcode6.4

compiler:
  - clang
  - gcc

cache:
  ccache: true
  directories:
    - $HOME/hombebrew_cache

env:
  global:
    - secure: BXyNziNYFLqLtY6Q58BDEUpRJr81HUtHpxf2Sr646bDcbG0Rf2rb2utqHZJ1Om926WdH7RqHuoVti4dr2X1lh4nHMkLD7MrIrfIkNN5T9aZdk19uw9IyMtz/cXon7/wqVo24tVqtBI0UghFxKii/GTDJEvRKgfpPp1e1vKSNGa4=
    # Which Travis environment to run Coverity on
    - coverity_scan_run_condition='"$TRAVIS_OS_NAME" = linux -a "$CC" = gcc'
    # Test mode is for testing if it's working with Coverity. Change to true if testing, to avoid reaching the quota.
    - coverity_scan_script_test_mode=false

matrix:
  exclude:
    - os: osx
      compiler: gcc
  include:
    - os: linux
      compiler: clang
      env: WITHOUT_LLVM="yes"
  

git:
  submodules: false

before_install:
  - docker pull rpcs3/rpcs3
  - if [ "$CC" = "clang" ]; then
      export CXX="clang++-4.0" CC="clang-4.0";
    fi;    
  - if [ "$TRAVIS_OS_NAME" = "linux" ] && [ "$CXX" = "g++" ]; then
      export CXX="g++-5" CC="gcc-5" CXXFLAGS="-Wno-format-security";
      export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01';
    fi;
  # Add coverall for C++ so coverall.io could be triggered. Even it should be --coverage and gcov.
  # Install updated libglew-dev since the version provided by trusty is outdated
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      pip install --user cpp-coveralls requests[security];
    else
      brew update; brew update;
      brew install ccache glew llvm40;
    fi;

before_script:
  - git submodule update --init asmjit 3rdparty/ffmpeg 3rdparty/pugixml 3rdparty/GSL 3rdparty/libpng Utilities/yaml-cpp 3rdparty/cereal 3rdparty/hidapi Vulkan/glslang Vulkan/Vulkan-LoaderAndValidationLayers
  - mkdir build
  - cd build
  - ls /
  - ls ${PWD}../
  - ls
  - docker run -v ${PWD}../:/rpcs3 -e CC=$CC -e CXX=$CXX rpcs3/rpcs3 /bin/bash -c "cd /rpcs3/ ; ls ; cd build ; cmake .. -DCMAKE_INSTALL_PREFIX=/usr"
  #- if [ -z "$WITHOUT_LLVM" ]; then
      
    #else
      #cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DWITHOUT_LLVM=ON;
  #  fi;
  - make -j 3
  - # AppImage generation
  - if [ "$TRAVIS_BRANCH" = "master" ] && [ "$CC" = "clang-4.0" ] && [ "$TRAVIS_PULL_REQUEST" = false ]; then
      export LD_LIBRARY_PATH=${PWD}/3rdparty/libpng:/opt/qt59/lib/:$LD_LIBRARY_PATH ;
      make DESTDIR=appdir install ; find appdir/ ;
      find ../bin ;
      wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" ; 
      chmod a+x linuxdeployqt*.AppImage ;
      unset QTDIR; unset QT_PLUGIN_PATH ;
      ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs ;
      ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage ;
      find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq ;
      zip -r9 rpcs3.zip ./RPCS3*.AppImage; 
      if [ -z "$WITHOUT_LLVM" ]; then
        export LLVM="-LLVM";
      fi;
      curl ${UPLOAD_URL}${TRAVIS_COMMIT:0:7}-${TRAVIS_BUILD_NUMBER}${LLVM}_linux64 --upload-file rpcs3.zip; 
   fi;

script:
  # Add a command to show all the variables. May be useful for debugging Travis.
  #- echo "--Shell Export Lists START--" ; export -p; echo "--Shell Export Lists STOP--";
  # And to ensure the versions of toolchain
  - echo "--CXX version?"; "$CXX" --version; echo "--CXX version confirmed";
  #- if [ "$COVERITY_SCAN_BRANCH" != 1 ]; then make -j 3; fi

addons:
  apt:
    packages:
      - cmake
  coverity_scan:
    project:
      name: $TRAVIS_REPO_SLUG
      description: "PS3 emulator/debugger"
    notification_email: nekotekina@gmail.com
    build_command: "make -j 3"
    branch_pattern: coverity_scan

after_success:
  - if [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ "$TRAVIS_OS_NAME" = linux ]; then coveralls --extension .c --extension .cpp --extension .h; fi
